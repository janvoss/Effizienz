# Effiziente Allokation auf Märkten

## Nachfrage und Angebot auf Märkten

### Herleitung der Nachfragefunktion

s. Tafelaufschrieb

### Aggregation der Nachfragefunktion

```{r echo=F, warning=F, message=F, cache=F}
# Bibliotheken laden
library(tidyverse)

# Funktionen definieren

x <- 0:5

demand2 <- function(x) 4-x
demand1 <- function(x) 3-.8*x

# x=4-p
#(4/5)*x=3-p
#x=(15/4)-(5/4)p

#x=(31/4)-(9/4)p

#(9/4)p=(31/4)-x

#p=(31/9)-(4/9)x 

demandg <- function(x) (31/9)-(4/9)*x 

# Schnittpunkt 

q0 <- uniroot(function(x) demand2(x) - demandg(x), range(x))$root

p0 <- function(x) 2.5

q1 <- uniroot(function(x) demand1(x) - p0(x), range(x))$root

q2 <- uniroot(function(x) demand2(x) - p0(x), range(x))$root

qg <- uniroot(function(x) demandg(x) - p0(x), range(x))$root


# Chart

p  <- ggplot() +
  stat_function(aes(color = "Nachfrage"), fun = demand1, xlim = c(0,3.3))+
   annotate(geom = "text", x=3.3, y=demand1(3.3), hjust=-0.1, label=expression('D'[1]),color = "grey30")+
  
  stat_function(aes(color = "Nachfrage"), fun = demand2, xlim = c(0,3.3))+
   annotate(geom = "text", x=3.3, y=demand2(3.3), hjust=-0.1, label=expression('D'[2]),color = "grey30")+
  
  stat_function(aes(color = "Nachfrage"), fun = demandg, xlim = c(q0,3.3), size=1)+
   annotate(geom = "text", x=3.3, y=demandg(3.3), hjust=-0.1, label=expression('D'[ges]),color = "grey30")+
  
  stat_function(aes(color = "Nachfrage"), fun = demand2, xlim = c(0,q0), size=1)+
  stat_function(fun = p0, xlim = c(0,3.3), linetype= "dashed")+
  #
  annotate("point", x = q1, y = demand1(q1), color = "grey30")+
  annotate("point", x = q2, y = demand2(q2), color = "grey30")+
  annotate("point", x = qg, y = demandg(qg), color = "grey30")+
  annotate("point", x=0, y=demand1(0))+
  annotate("point", x=q0, y=demandg(q0))+
  #
  annotate("segment", x = q1, xend = q1, y = 0, yend = demand1(q1),
                    linetype = "dashed", color = "grey30") +
  annotate("segment", x = q2, xend = q2, y = 0, yend = demand2(q2),
           linetype = "dashed", color = "grey30") +
  annotate("segment", x = qg, xend = qg, y = 0, yend = demandg(qg),
           linetype = "dashed", color = "grey30") +
  annotate("segment", x=0, xend=q0, y=demandg(q0), yend=demandg(q0), linetype = "dashed")+
    #
  scale_color_manual(values=c("green"))+
#  scale_fill_manual(values=c("green", "orange"))+
  scale_x_continuous(expand = c(0, 0), 
                     breaks = c(0, q1, q2, qg), labels = expression(0, "x"[1], "x"[2], "x"[ges]),
                     limits = c(0, 4)) +
  scale_y_continuous(expand = c(0, 0), 
                     breaks = p0,
                     labels=expression("p"[0]),
                     limits = c(0,5)
                    ) +
  theme_classic() +
  theme(panel.grid = element_blank(),
        legend.position = "none", #Damit Legende unterdrückt.
       ) +
  theme(axis.line = element_line(arrow = arrow(type='closed', length = unit(5,'pt'))))+
  labs(x = "Menge", y = "Preis", 
       color = NULL, fill = NULL)
p

```

### Herleitung der Angebotsfunktion


[Angebotsfunktion herleiten?]::

$$\max \pi=\bar{p}\times x-TC(x)$$

$$\frac{d\pi}{dx}=\bar{p}-MC\overset{!}{=}0  \iff \bar{p}=MC$$

[TR-TC]::


```{r echo=F, warning=F, message=F, cache=F}
# Bibliotheken laden
library(tidyverse)

# Funktionen definieren

x <- 0:5

TC <- function(x) x^2.2+2
TR <- function(x) 4.5*x


# Gewinnmaximum

## Steigungen gleich


q <- uniroot(function(x) x^1.2*2.2 - 4.5 , range(x))$root

help <- TR(q)-TC(q)

help2 <- function(x) 4.5*x-help

#Gleichgewichtspreis
#p <- supply(q)

# Konsumenten- und Produzentenrente

#z <- seq(0, q, 0.01)

# Abbildung

p <- ggplot() +
  stat_function(aes(color = "TC"), fun = TC, xlim = c(0,3.5))+
 #  annotate(geom = "text", x=3.5, y=TC(3.5), hjust=-0.1, label="TC",color = "grey30")+
  stat_function(aes(color = "TR"), fun = TR, xlim = c(0,3.5))+
#  annotate(geom = "text", x=3.5, y=TR(3.5), hjust=-0.1, label="TR",color = "grey30")+ 
  annotate("point", x = q, y = TC(q), color = "grey30")+
  annotate("point", x = q, y = TR(q), color = "grey30")+
  annotate("segment", x = q, xend = q, y = 0, yend = TC(q),
           linetype = "dashed", color = "grey30") +
  stat_function(aes(),linetype="dashed", fun=help2, xlim=c(q-1, q+1))+
  annotate("segment", x=q, xend=q, y=TC(q), yend=TR(q),
           #linetype="dotted",
           arrow=arrow(ends="both", length = unit(.3, "cm")))+
   #geom_ribbon(aes(x = z, ymin = supply(z), ymax = p,
    #              fill = "Produzentenrente"), alpha = 0.25) +
  #geom_ribbon(aes(x = z, ymin = p, ymax = demand(z),
   #               fill = "Konsumentenrente"), alpha = 0.25)+
  scale_color_manual(values=c("red", "green"))+
  #scale_fill_manual(values=c("green", "orange"))+
  scale_x_continuous(expand = c(0, 0), 
                     breaks = c(0,q), labels = c(0,"x*"),
                     limits = c(0, 4)) +
  scale_y_continuous(expand = c(0, 0), 
                     breaks = NULL, labels = NULL,
                     limits = c(0,19)) +
  theme_classic() +
  theme(panel.grid = element_blank(),
       # legend.position = "none", #Damit Legende unterdrückt.
       ) +
  theme(axis.line = element_line(arrow = arrow(type='closed', length = unit(5,'pt'))))+
  labs(x = "Menge", y = "TC, TR", 
       color = NULL, fill = NULL)
p

```

Höherer Preis $\rightarrow$ Menge ausdehnen, bis wieder Preis=Grenzkosten


```{r echo=F, warning=F, message=F, cache=F}
# Bibliotheken laden
library(tidyverse)

# Funktionen definieren

x <- 0:5

TC <- function(x) x^2.2+2
TR <- function(x) 4.5*x

TRN <- function(x) 5.5*x


# Gewinnmaximum

## Steigungen gleich


q <- uniroot(function(x) x^1.2*2.2 - 4.5 , range(x))$root

help <- TR(q)-TC(q)

help2 <- function(x) 4.5*x-help

qn <- uniroot(function(x) x^1.2*2.2 - 5.5 , range(x))$root

helpn <- TRN(qn)-TC(qn)

help2n <- function(x) 5.5*x-helpn

#Gleichgewichtspreis
#p <- supply(q)

# Konsumenten- und Produzentenrente

#z <- seq(0, q, 0.01)

# Abbildung

p <- ggplot() +
  stat_function(aes(color = "TC"), fun = TC, xlim = c(0,3.5))+
 #  annotate(geom = "text", x=3.5, y=TC(3.5), hjust=-0.1, label="TC",color = "grey30")+
  stat_function(aes(color = "TR"), fun = TR, xlim = c(0,3.5))+
#  annotate(geom = "text", x=3.5, y=TR(3.5), hjust=-0.1, label="TR",color = "grey30")+ 
  stat_function(aes(color = "TR"), fun = TRN, xlim = c(0,3.5),  linetype= "dashed")+
  annotate("point", x = q, y = TC(q), color = "grey30")+
  annotate("point", x = q, y = TR(q), color = "grey30")+
  annotate("segment", x = q, xend = q, y = 0, yend = TC(q),
           linetype = "dashed", color = "grey30") +
  stat_function(aes(),linetype="dashed", fun=help2, xlim=c(q-1, q+1))+
  annotate("segment", x=q, xend=q, y=TC(q), yend=TR(q),
           #linetype="dotted",
           arrow=arrow(ends="both", length = unit(.3, "cm")))+
  annotate("point", x = qn, y = TC(qn), color = "grey30")+
  annotate("point", x = qn, y = TRN(qn), color = "grey30")+
  annotate("segment", x = qn, xend = qn, y = 0, yend = TC(qn),
           linetype = "dashed", color = "grey30") +
  stat_function(aes(),linetype="dashed", fun=help2n, xlim=c(qn-1, qn+1))+
  annotate("segment", x=qn, xend=qn, y=TC(qn), yend=TRN(qn),
           #linetype="dotted",
           arrow=arrow(ends="both", length = unit(.3, "cm")))+
  #Pfeil
  geom_curve(
    aes(x = 2.5, y = TR(2.5), xend = 2.8, yend = TRN(2.8)),
    arrow = arrow(length = unit(0.03, "npc")),
    angle=90
  )+
  
   #geom_ribbon(aes(x = z, ymin = supply(z), ymax = p,
    #              fill = "Produzentenrente"), alpha = 0.25) +
  #geom_ribbon(aes(x = z, ymin = p, ymax = demand(z),
   #               fill = "Konsumentenrente"), alpha = 0.25)+
  scale_color_manual(values=c("red", "green"))+
  #scale_fill_manual(values=c("green", "orange"))+
  scale_x_continuous(expand = c(0, 0), 
                     breaks = c(0,q, qn), labels = c(0,"x*", "x*'"),
                     limits = c(0, 4)) +
  scale_y_continuous(expand = c(0, 0), 
                     breaks = NULL, labels = NULL,
                     limits = c(0,19)) +
  theme_classic() +
  theme(panel.grid = element_blank(),
       # legend.position = "none", #Damit Legende unterdrückt.
       ) +
  theme(axis.line = element_line(arrow = arrow(type='closed', length = unit(5,'pt'))))+
  labs(x = "Menge", y = "TC, TR", 
       color = NULL, fill = NULL)

```

$\rightarrow$ Die  Menge wird immer soweit ausgedehnt, bis die Grenzkosten dem Preis (Steigung der Erlösfunktion) entsprechen. **Damit ist die Grenzkostenfunktion die Angebotsfunktion**.


### Aggregation der Angebotsfunktion

```{r echo=F, warning=F, message=F, cache=F}
# Bibliotheken laden
library(tidyverse)

# Funktionen definieren

x <- 0:6

supply2 <- function(x) 1+x
supply1 <- function(x) 2+.8*x

# x=p-1
#(4/5)*x=p-2
#x=(5/4)p-(10/4)

#x=(9/4)p-(14/4)

#(9/4)p=(14/4)+x |*(4/9)

#p=(14/9)+(4/9)x 

supplyg <- function(x) (14/9)+(4/9)*x 

# Schnittpunkt 

q0 <- uniroot(function(x) supply2(x) - supplyg(x), range(x))$root

p0 <- function(x) 3

q1 <- uniroot(function(x) supply1(x) - p0(x), range(x))$root

q2 <- uniroot(function(x) supply2(x) - p0(x), range(x))$root

qg <- uniroot(function(x) supplyg(x) - p0(x), range(x))$root


# Chart

p  <- ggplot() +
  stat_function(aes(color = "Angebot"), fun = supply1, xlim = c(0,3.3))+
   annotate(geom = "text", x=3.3, y=supply1(3.3), hjust=-0.1, label=expression('S'[1]),color = "grey30")+
  
  stat_function(aes(color = "Angebot"), fun = supply2, xlim = c(0,3.3))+
   annotate(geom = "text", x=3.3, y=supply2(3.3), hjust=-0.1, label=expression('S'[2]),color = "grey30")+
  
  stat_function(aes(color = "Angebot"), fun = supplyg, xlim = c(q0,3.3), size=1)+
   annotate(geom = "text", x=3.3, y=supplyg(3.3), hjust=-0.1, label=expression('S'[ges]),color = "grey30")+
  
  stat_function(aes(color = "Angebot"), fun = supply2, xlim = c(0,q0), size=1)+
  stat_function(fun = p0, xlim = c(0,3.3), linetype= "dashed")+
  #
  annotate("point", x = q1, y = supply1(q1), color = "grey30")+
  annotate("point", x = q2, y = supply2(q2), color = "grey30")+
  annotate("point", x = qg, y = supplyg(qg), color = "grey30")+
  annotate("point", x=0, y=supply1(0))+
  annotate("point", x=q0, y=supplyg(q0))+
  #
  annotate("segment", x = q1, xend = q1, y = 0, yend = supply1(q1),
                    linetype = "dashed", color = "grey30") +
  annotate("segment", x = q2, xend = q2, y = 0, yend = supply2(q2),
           linetype = "dashed", color = "grey30") +
  annotate("segment", x = qg, xend = qg, y = 0, yend = supplyg(qg),
           linetype = "dashed", color = "grey30") +
  annotate("segment", x=0, xend=q0, y=supplyg(q0), yend=supplyg(q0), linetype = "dashed")+
    #
  scale_color_manual(values=c("orange"))+
#  scale_fill_manual(values=c("green", "orange"))+
  scale_x_continuous(expand = c(0, 0), 
                     breaks = c(0, q1, q2, qg), labels = expression(0, "x"[1], "x"[2], "x"[ges]),
                     limits = c(0, 4)) +
  scale_y_continuous(expand = c(0, 0), 
                     breaks = p0,
                     labels=expression("p"[0]),
                     limits = c(0,5)
                    ) +
  theme_classic() +
  theme(panel.grid = element_blank(),
        legend.position = "none", #Damit Legende unterdrückt.
       ) +
  theme(axis.line = element_line(arrow = arrow(type='closed', length = unit(5,'pt'))))+
  labs(x = "Menge", y = "Preis", 
       color = NULL, fill = NULL)
p

```


## Das Marktgleichgewicht, Konsumenten- und Produzentenrente

```{r echo=F, warning=F, message=F, cache=F}
# Bibliotheken laden
library(tidyverse)
# Funktionen definieren

x <- 0:5

demand <- function(x) (x - 8)^2-5*x
supply <- function(x) x^2.5 + 2.5*x + 8

#labels <- c("Nachfrage", "Angebot")

#Gleichgewichtsmenge
q <- uniroot(function(x) demand(x) - supply(x), range(x))$root

#Gleichgewichtspreis
p <- supply(q)

# Konsumenten- und Produzentenrente

z <- seq(0, q, 0.01)

# Chart

chart <- ggplot() +
  stat_function(aes(color = "Nachfrage"), fun = demand, xlim = c(0,3.5))+
   annotate(geom = "text", x=3.5, y=demand(3.5), hjust=-0.1, label="Nachfrage",color = "grey30")+
  stat_function(aes(color = "Angebot"), fun = supply, xlim = c(0,3.5))+
  annotate(geom = "text", x=3.5, y=supply(3.5), hjust=-0.1, label="Angebot",color = "grey30")+ 
  annotate("point", x = q, y = p, color = "grey30")+
  annotate("segment", x = q, xend = q, y = 0, yend = p,
           linetype = "dashed", color = "grey30") +
  annotate("segment", x = 0, xend = q, y = p, yend = p,
           linetype = "dashed", color = "grey30")+
   geom_ribbon(aes(x = z, ymin = supply(z), ymax = p,
                  fill = "Produzentenrente"), alpha = 0.25) +
  annotate("text", x=1, y=16, label="PR", color="grey30")+
  geom_ribbon(aes(x = z, ymin = p, ymax = demand(z),
                  fill = "Konsumentenrente"), alpha = 0.25)+
  annotate("text", x=1, y=28, label="KR", color="grey30")+
  scale_color_manual(values=c("orange", "green"))+
  scale_fill_manual(values=c("green", "orange"))+
  scale_x_continuous(expand = c(0, 0), 
                     breaks = c(0,q), labels = c(0,"x*"),
                     limits = c(0, 4)) +
  scale_y_continuous(expand = c(0, 0), 
                     breaks = p, labels = "p*",
                     limits = c(0,70)) +
  theme_classic() +
  theme(panel.grid = element_blank(),
        legend.position = "none", #Damit Legende unterdrückt.
       ) +
  theme(axis.line = element_line(arrow = arrow(type='closed', length = unit(5,'pt'))))+
  labs(x = "Menge", y = "Preis", 
       color = NULL, fill = NULL)
chart

```

## Der Wohlfahrtsverlust von Mindest- und Höchstpreisen


### Mindestpreis

```{r echo=F, warning=F, message=F, cache=F}
# Bibliotheken laden
library(tidyverse)
library(ggtext)

# Funktionen definieren

x <- 0:5

demand <- function(x) (x - 8)^2-5*x
supply <- function(x) x^2.5 + 2.5*x + 8
t <-10
supply_t <- function(x) x^2.5 + 2.5*x + 8+t

#labels <- c("Nachfrage", "Angebot")

#Gleichgewichtsmengen
q <- uniroot(function(x) demand(x) - supply(x), range(x))$root

q_t <- uniroot(function(x) demand(x) - supply_t(x), range(x))$root

#Gleichgewichtspreise
p <- supply(q)
p_t <- supply_t(q_t)

test <- "x^t"

# Konsumenten- und Produzentenrente

z <- seq(0, q, 0.01)
z_t <- seq(0, q_t, 0.01)
z_wfl <- seq(q_t, q, 0.01)

# Chart (Erzeugt aus Abb. mit Steuer)

chart <- ggplot() +
  stat_function(aes(color = "Nachfrage"), fun = demand, xlim = c(0,3.5))+
   annotate(geom = "text", x=3.5, y=demand(3.5), hjust=-0.4, label="D",color = "grey30")+
  stat_function(aes(color = "Angebot"), fun = supply, xlim = c(0,3.5))+
  annotate(geom = "text", x=3.5, y=supply(3.5), hjust=-0.4, label="S",color = "grey30")+ 
  annotate("point", x = q, y = p, color = "grey30")+
  annotate("segment", x = q, xend = q, y = 0, yend = p,
           linetype = "dashed", color = "grey30") +
  annotate("segment", x = 0, xend = q, y = p, yend = p,
           linetype = "dashed", color = "grey30")+
   geom_ribbon(aes(x = z_t, ymin = supply(z_t), ymax = p_t,
                  fill = "Produzentenrente"), alpha = 0.25) +
#  stat_function(aes(color = "Angebot mit Steuer"), fun = supply_t, xlim = c(0,3.5))+
#  annotate(geom = "text", x=3.5, y=supply_t(3.5), hjust=-0.4, label="MC+t",color = "grey30")+
  annotate("point", x = q_t, y = p_t, color = "grey30")+
  annotate("segment", x = q_t, xend = q_t, y = 0, yend = p_t,
           linetype = "dashed", color = "grey30") +
  annotate("segment", x = 0, xend = q_t, y = p_t, yend = p_t,
           linetype = "dashed", color = "grey30")+
 # annotate("text", x=1, y=16, label="PR", color="grey30")+
  #Preis abzüglich steuer
  # annotate("segment", x = 0, xend = q_t, y = p_t-t, yend = p_t-t,
   #        linetype = "dashed", color = "grey30")+
  geom_ribbon(aes(x = z_t, ymin = p_t, ymax = demand(z_t),
                  fill = "Konsumentenrente"), alpha = 0.25)+
 # geom_ribbon(aes(x = z_t, ymin = p_t-t, ymax = p_t,
  #                fill = "Steuereinnahmen"), alpha = 0.55)+
  geom_ribbon(aes(x = z_wfl, ymin = supply(z_wfl), ymax = demand(z_wfl),
                  fill = "Wohlfahrtsverlust"), alpha = 0.55)+
#  annotate("text", x=1, y=28, label="KR", color="grey30")+
  scale_color_manual(values=c("orange", #"blue",
                              "green"))+
  scale_fill_manual(values=c("green", "orange", #"blue",
                             "red"))+
  scale_x_continuous(expand = c(0, 0), 
                     breaks = c(0,q_t,q), labels = expression(0, "x"^0,"x*"),
                     limits = c(0, 4)) +
  scale_y_continuous(expand = c(0, 0), 
                     breaks = c(p, p_t), labels = expression("p*", "p"^min),
                     limits = c(0,70)) +
  theme_classic() +
  theme(panel.grid = element_blank(),
       # legend.position = "none", #Damit Legende unterdrückt.
       #axis.breaks.x=element_markdown()
       ) +
  theme(axis.line = element_line(arrow = arrow(type='closed', length = unit(5,'pt'))))+
  labs(x = "Menge", y = "Preis", 
       color = NULL, fill = NULL)


chart

```

### Höchstpreis

```{r echo=F, warning=F, message=F, cache=F}
# Bibliotheken laden
library(tidyverse)
library(ggtext)

# Funktionen definieren

x <- 0:5

demand <- function(x) (x - 8)^2-5*x
supply <- function(x) x^2.5 + 2.5*x + 8
t <-10
supply_t <- function(x) x^2.5 + 2.5*x + 8+t

#labels <- c("Nachfrage", "Angebot")

#Gleichgewichtsmengen
q <- uniroot(function(x) demand(x) - supply(x), range(x))$root

q_t <- uniroot(function(x) demand(x) - supply_t(x), range(x))$root

#Gleichgewichtspreise
p <- supply(q)
p_t <- supply_t(q_t)

test <- "x^t"

# Konsumenten- und Produzentenrente

z <- seq(0, q, 0.01)
z_t <- seq(0, q_t, 0.01)
z_wfl <- seq(q_t, q, 0.01)

# Chart (Erzeugt aus Abb. mit Steuer)

chart <- ggplot() +
  stat_function(aes(color = "Nachfrage"), fun = demand, xlim = c(0,3.5))+
   annotate(geom = "text", x=3.5, y=demand(3.5), hjust=-0.4, label="D",color = "grey30")+
  stat_function(aes(color = "Angebot"), fun = supply, xlim = c(0,3.5))+
  annotate(geom = "text", x=3.5, y=supply(3.5), hjust=-0.4, label="S",color = "grey30")+ 
  annotate("point", x = q, y = p, color = "grey30")+
  annotate("segment", x = q, xend = q, y = 0, yend = p,
           linetype = "dashed", color = "grey30") +
  annotate("segment", x = 0, xend = q, y = p, yend = p,
           linetype = "dashed", color = "grey30")+
   geom_ribbon(aes(x = z_t, ymin = supply(z_t), ymax = p_t-t,
                  fill = "Produzentenrente"), alpha = 0.25) +
#  stat_function(aes(color = "Angebot mit Steuer"), fun = supply_t, xlim = c(0,3.5))+
#  annotate(geom = "text", x=3.5, y=supply_t(3.5), hjust=-0.4, label="MC+t",color = "grey30")+
  annotate("point", x = q_t, y = p_t, color = "grey30")+
  annotate("segment", x = q_t, xend = q_t, y = 0, yend = p_t,
           linetype = "dashed", color = "grey30") +
#  annotate("segment", x = 0, xend = q_t, y = p_t, yend = p_t,
 #          linetype = "dashed", color = "grey30")+
 # annotate("text", x=1, y=16, label="PR", color="grey30")+
  #Preis abzüglich steuer
   annotate("segment", x = 0, xend = q_t, y = p_t-t, yend = p_t-t,
           linetype = "dashed", color = "grey30")+
  geom_ribbon(aes(x = z_t, ymin = p_t-t, ymax = demand(z_t),
                  fill = "Konsumentenrente"), alpha = 0.25)+
 # geom_ribbon(aes(x = z_t, ymin = p_t-t, ymax = p_t,
  #                fill = "Steuereinnahmen"), alpha = 0.55)+
  geom_ribbon(aes(x = z_wfl, ymin = supply(z_wfl), ymax = demand(z_wfl),
                  fill = "Wohlfahrtsverlust"), alpha = 0.55)+
#  annotate("text", x=1, y=28, label="KR", color="grey30")+
  scale_color_manual(values=c("orange", #"blue",
                              "green"))+
  scale_fill_manual(values=c("green", "orange", #"blue",
                             "red"))+
  scale_x_continuous(expand = c(0, 0), 
                     breaks = c(0,q_t,q), labels = expression(0, "x"^1,"x*"),
                     limits = c(0, 4)) +
  scale_y_continuous(expand = c(0, 0), 
                     breaks = c(p, p_t-t), labels = expression("p*", "p"^max),
                     limits = c(0,70)) +
  theme_classic() +
  theme(panel.grid = element_blank(),
       # legend.position = "none", #Damit Legende unterdrückt.
       #axis.breaks.x=element_markdown()
       ) +
  theme(axis.line = element_line(arrow = arrow(type='closed', length = unit(5,'pt'))))+
  labs(x = "Menge", y = "Preis", 
       color = NULL, fill = NULL)


chart

```

## Der Wohlfahrtsverlust einer Mengensteuer


```{r echo=T, warning=F, message=F, cache=F}
# Bibliotheken laden
library(tidyverse)
library(ggtext)

# Funktionen definieren

x <- 0:5

demand <- function(x) (x - 8)^2-5*x
supply <- function(x) x^2.5 + 2.5*x + 8
t <-10
supply_t <- function(x) x^2.5 + 2.5*x + 8+t

#labels <- c("Nachfrage", "Angebot")

#Gleichgewichtsmengen
q <- uniroot(function(x) demand(x) - supply(x), range(x))$root

q_t <- uniroot(function(x) demand(x) - supply_t(x), range(x))$root

#Gleichgewichtspreise
p <- supply(q)
p_t <- supply_t(q_t)

test <- "x^t"

# Konsumenten- und Produzentenrente

z <- seq(0, q, 0.01)
z_t <- seq(0, q_t, 0.01)
z_wfl <- seq(q_t, q, 0.01)

# Chart

chart <- ggplot() +
  stat_function(aes(color = "Nachfrage"), fun = demand, xlim = c(0,3.5))+
   annotate(geom = "text", x=3.5, y=demand(3.5), hjust=-0.4, label="D",color = "grey30")+
  stat_function(aes(color = "Angebot"), fun = supply, xlim = c(0,3.5))+
  annotate(geom = "text", x=3.5, y=supply(3.5), hjust=-0.4, label="S=MC",color = "grey30")+ 
  annotate("point", x = q, y = p, color = "grey30")+
  annotate("segment", x = q, xend = q, y = 0, yend = p,
           linetype = "dashed", color = "grey30") +
  annotate("segment", x = 0, xend = q, y = p, yend = p,
           linetype = "dashed", color = "grey30")+
   geom_ribbon(aes(x = z, ymin = supply(z), ymax = p,
                  fill = "Produzentenrente"), alpha = 0.25) +
  stat_function(aes(color = "Angebot mit Steuer"), fun = supply_t, xlim = c(0,3.5))+
  annotate(geom = "text", x=3.5, y=supply_t(3.5), hjust=-0.4, label="MC+t",color = "grey30")+
  annotate("point", x = q_t, y = p_t, color = "grey30")+
  annotate("segment", x = q_t, xend = q_t, y = 0, yend = p_t,
           linetype = "dashed", color = "grey30") +
  annotate("segment", x = 0, xend = q_t, y = p_t, yend = p_t,
           linetype = "dashed", color = "grey30")+
 # annotate("text", x=1, y=16, label="PR", color="grey30")+
  #Preis abzüglich steuer
   annotate("segment", x = 0, xend = q_t, y = p_t-t, yend = p_t-t,
           linetype = "dashed", color = "grey30")+
  geom_ribbon(aes(x = z, ymin = p, ymax = demand(z),
                  fill = "Konsumentenrente"), alpha = 0.25)+
  geom_ribbon(aes(x = z_t, ymin = p_t-t, ymax = p_t,
                  fill = "Steuereinnahmen"), alpha = 0.55)+
  geom_ribbon(aes(x = z_wfl, ymin = supply(z_wfl), ymax = demand(z_wfl),
                  fill = "Wohlfahrtsverlust"), alpha = 0.55)+
#  annotate("text", x=1, y=28, label="KR", color="grey30")+
  scale_color_manual(values=c("orange", "blue", "green"))+
  scale_fill_manual(values=c("green", "orange", "blue", "red"))+
  scale_x_continuous(expand = c(0, 0), 
                     breaks = c(0,q_t,q), labels = expression(0, "x"^t,"x*"),
                     limits = c(0, 4)) +
  scale_y_continuous(expand = c(0, 0), 
                     breaks = c(p, p_t), labels = expression("p*", "p"^t),
                     limits = c(0,70)) +
  theme_classic() +
  theme(panel.grid = element_blank(),
       # legend.position = "none", #Damit Legende unterdrückt.
       #axis.breaks.x=element_markdown()
       ) +
  theme(axis.line = element_line(arrow = arrow(type='closed', length = unit(5,'pt'))))+
  labs(x = "Menge", y = "Preis", 
       color = NULL, fill = NULL)


chart

```


## Wettbewerbsfunktionen
[@conradWirtschaftsethik2016]

**Statische Wettbewerbsfunktionen**

- Steuerungsfunktion

- Allokationsfunktion

- Anreizfunktion

- Sanktionsfunktion

- Verteilungsfunktion

- Freiheitsfunktion

- Kontrollfunktion


**Dynamische Wettbewerbsfunktionen**

- Innovationsfunktion

- Imitationsfunktion

- Anpassungsfunktion

[Irgendwo auch: Entlassung von Mitarbeitenden: Funktion und ethische Bewertung]::

## Pfadabhängigkeit

Wettbewerb kann durch selbst-verstärkende Prozesse geprägt sein. Zufälle in frühen Perioden können dann zu verfestigten Wettbewerbsstrukturen führen.

### Veranschaulichung anhand der Pólya-Urne

- Es gibt Kugeln verschiedener Farben in einer Urne.

- Es wird zufällig eine Kugel gezogen

- Die gezogene Kugel wird zurückgelegt

- Es wird eine zusätzliche Kugel (oder mehrere zusätzliche Kugeln) der Urne hinzugefügt, die die gleiche Farbe hat (haben), wie die zuvor gehogene Kugel. 

- Die Prozedur wird wiederholt


### Grafik

```{r echo=T, warning=F, message=F, fig.width=12}

#Original [https://www.r-bloggers.com/2021/09/the-polya-urn-model-a-simple-simulation-of-the-rich-get-richer/]

# Nun mit ggplot
library(tidyverse)

# Matrix aufbauen
cols = c("black", "blue", "green", "red", "yellow")

n=1000

urn <- cols |> table() |> as.matrix() |> t()
urn <- rbind(urn, matrix(NA, nrow = n-1, ncol = ncol(urn)))
cols_unique <- colnames(urn)

# n-1 draws from Dirichelet distribution

for(j in (1:5)){
set.seed(123+j)
for (i in seq_len(n-1)) {
  urn[i+1, ] <- urn[i, ]
  col_sample <- sample(cols_unique, size = 1, prob = (urn[i, ] / sum(urn[i, ]))                       ) # sample ball
  urn[i+1, col_sample] <- urn[i+1, col_sample] + 1 # add ball with same colour
}
# Data frame erzeugen
  
df <- as.data.frame(urn) %>% 
  mutate(Züge=seq(1:n))

# Rundenanzahl

# long format

df1 <- df %>%   
  pivot_longer( !starts_with("Z") ,
               names_to = "Farbe", values_to = "Anzahl") %>% 
  group_by(Züge) %>% 
  mutate(Anteil=Anzahl/sum(Anzahl))

p1 <- df1 %>% 
  ggplot(aes(x=Züge, y=Anzahl, group=Farbe, color=Farbe))+
  geom_line(size=1)+
  scale_color_manual(values=c(unique(df1$Farbe)),
                     labels=c("schwarz", "blau", "grün", "rot", "gelb"))+
  theme_light()
  #theme(legend.position = 'bottom', legend.direction = "horizontal")+
  #theme(legend.position = NULL)

p2 <- df1 %>% 
  ggplot(aes(x=Züge, y=Anteil, group=Farbe, color=Farbe))+
  geom_line(size=1)+
  scale_color_manual(values=c(unique(df1$Farbe)),
                     labels=c("schwarz", "blau", "grün", "rot", "gelb"))+
  theme_light()
  #theme(legend.position = 'bottom', legend.direction = "horizontal")#+
  #theme(legend.position = NULL)


#p1 <- p1+theme(legend.position = NULL)


library(patchwork)

print(p1+ p2+plot_layout(guides = 'collect') +
  plot_annotation(title = paste0('Pfadabhängigkeit in der Póliya-Urne'),
                  subtitle=paste0('Durchlauf Nr. ', j)))
}

```

### Ergebnis 

- Zufälle bei den ersten Zügen haben großen Einfluss auf die Verteilung der Kugelfarben in der Urne 


- Eine oder mehrere Farben erhalten auch bei Gleichverteilung der Farben zu Beginn eine dominante Position



### Anwendung auf ökonomischen Wettbewerb

- Netzwerkeffekte (Vorteile großer Nutzerzahlen)

- Lock-in-Effekte (Tastaturlayout, Betriebssysteme, politischer Wettbewerb)

- Superstarphänomene (Michael Jackson war ein Star, weil er gute Musik machte. Er war auch ein Star, weil er ein Star war)