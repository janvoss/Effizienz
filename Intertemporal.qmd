# Intertemporale Effizienz

## Das Problem

- Intertemporal effiziente Nutzung einer Ressource (stagnieren, wachsend, schrumpfend)

- Wesentliche Elemente des Modells: 

   - Nutzenfunktion, insb. Grad des abnehmenden Grenznutzens

   - Grad der Gegenwartspräferenz, ausgedrückt im Diskontsatz

   - Wachstumsrate der Ressource (negativ bei Schrumpfung)


- Grundlegende Abwägung: 

   - Konsum heute ist besser als Konsum morgen (Gegenwartspräferenz)

   - Aber abnehmender Grenznutzen (daher Glättung des Konsums über die Zeit) und

   - Wachstum ermöglicht mehr Konsum in der Zukunft bei Verzicht in der Gegenwart 

## Zwei-Perioden-Modell

### Nutzenfunktion 

$U=u(x_0) + \frac{u(x_1)}{1+i}$

hier mit $u(x_t) = ln(x_t)$

$\Rightarrow u'(x_t) = \frac{1}{x_t}$ (sehr einfache Form des abnehmenden Grenznutzens)

### Budgetbeschränkung

$x_1 = (X_0 -x_0)(1+g)$

### Grafische Repräsentation der Lösung 

$\frac{MU_0}{MU_1} = \frac{\frac{1}{x_0}}{\frac{1}{x_1}\frac{1}{1+i}}$

```{python Zwei-Perioden}
#| warning: false
#| message: false
#| eval: true

{{< include _zwei-perioden.py >}}
```

### Die Euler-Gleichung 

- Aus der Grafik: Steigung der Budgetbeschränkung = Steigung der Indifferenzkurve


- $- \frac{u_0' (1+i)}{u_1'} = -(1+g)$   
$\iff \boxed{u_1' = \frac{1+i}{1+g} u_0'}$

- Der *korrigierte* Grenznutzen ist in allen Perioden gleich

- Sonst wäre (bei abnehmendem Grenznutzen) Periodensrbitrage durch Konsumverlagerung möglich.

- korrigiert:  
   - $(1+i)$: Der Grenznutzen der zukünftigen Periode ist um den Faktor (1+i) *höher*, da der Nutzen der zukünftigen Periode mit $\frac{1}{1+i}$ diskontiert wird.  

  - $(1+g)$: Der Grenznutzen der zukünftigen Periode ist um den Faktor $\frac{1}{1+g}$ *geringer*, da durch Wachstum die Ressource weniger knapp ist und daher mehr konsumiert (und damit der geringere Grenznutzen ausgeglichen) werden kann.

- Für die Nutzenfunktion $u(x_t)= ln(x_t)$ heißt das: $\frac{1}{x_1} = \frac{1+i}{1+g} \frac{1}{x_0}$ $\iff \boxed{x_1 = \frac{1+g}{1+i} x_0}$
  
  
Für Lösung gleichsetzen:
$x_0 \frac{1+g}{1+i}=(X_0-x_0)(1+g)$

$\iff \frac{x_0}{1+i}=X_0-x_0$

$\iff \frac{X_0-x_0}{x_0}=\frac{1}{1+i}$

$\iff \frac{X_0}{x_0}-1=\frac{1}{1+i}$

$\iff \frac{X_0}{x_0}=1+\frac{1}{1+i}$

$$\iff \boxed{x_0 = X_0 \frac{1 + i}{2 + i}}$$  
  

## T-Perioden-Modell, kontinuierliche Zeit

### Vorüberlegungen

Wenn eine Ressource in kontinuierlicher Zeit mit der Wachstumsrate $g$ wächst, und sie ursprünglich $X_0$ beträgt, dann beträgt sie nach $T$ Perioden $X_T=X_0 \times  e^{g\times T}$ Einheiten.

Wenn der Nutzen zukünftiger Prioden mit der Rate $i$ diskontiert wird, dann beträgt der Gegenwartswert zukünftigesn Nutzens in Periode $T$ $u_{PV}(x_T)=u(x_T) \times e^{-i \times T}$.


Die **Euler-Gleichung** in kontinuierlicher Zeit lautet dann $$u'(x_1)=u'(x_0) e^{(i-r)}$$

Der Gegenwartswert mehrerer zukünftiger Perioden ergibt sich aus dem Integral der absdiskontierten Nutzenwerte über die Zeit.

$U= \int_0^T u(x_t)e^{-it} dt$

Zunächst sei hier wieder von folgender Nutzenfunktion ausgegangen:

$u(x_t)=ln(x_t)$

Aus der Ableitung der Nutzenfunktion $u'(x_t)= \frac{1}{x_t}$ folgt der optimale Konsumpfad: $$\boxed{x_{t+1}=x_t \times e^{r-i}}$$.

Da dies für alle Perioden gilt, ist $$x_t= x_0\ e^{(r-i)t}$$

### Ressourcenbeschränkung

Zu jedem Zeitpunkt wächst die Ressource mit der Rate $r$ vermindert um die Entnahme zu dem Zeitpunkt $x_t$. Der Anfangsbestand der Ressource ist $X_0$, am Ende des Planungshorizontes soll die Ressource aufgebraucht sein, $X_T=0$.

$\dot{X}(t) = rX(t) - x(t), \quad X(0) = X_0, \quad X(T) = 0$

$\dot{X}(t) = rX(t) - x(0) e^{(r - i)t}$

Auflösen:

$X(t) = e^{rt} \left( X_0 - x(0) \int_0^t e^{-is} \, ds \right)$

Integral auflösen

$X(t) = e^{rt} \left( X_0 - \frac{x(0)}{i} \left( 1 - e^{-it} \right) \right)$

$X_T=0$, also

$X_0=\frac{x(0)}{i}( 1 - e^{-iT})$

$\iff x_0 = \frac{i X_0}{1-e^{-iT}}$

$x_t= x_0\ e^{(r-i)t}$

$$ \iff \boxed{ x_t=\frac{i X_0}{1-e^{-iT}}\ e^{(r-i)t}}$$


### Effizienter intertemporaler Konsumpfad

$x_t= x_0\ e^{(r-i)t}$


$$ \boxed{ x_t=\frac{i X_0}{1-e^{-iT}}\ e^{(r-i)t}}$$


Mit $T \to \infty$

$$ \boxed{x_t=i X_0\times e^{(r-i)t}}$$


```{python}
#| message: false
#| warning: false

import numpy as np
from sympy import symbols, exp, log, integrate, lambdify
from lets_plot import *
from scipy.integrate import odeint
from scipy.optimize import brentq
LetsPlot.setup_html()

# Konfiguration
X_0, i, g = 100, 0.03, 0.06
t_sym = symbols('t', real=True, positive=True)
time = np.linspace(0, 100, 500)

# SymPy Berechnungen
x_t = X_0 * i * exp((g - i) * t_sym)
U_t = integrate(log(x_t) * exp(-i * t_sym), (t_sym, 0, t_sym))
Uz_t = integrate(log(X_0 * g) * exp(-i * t_sym), (t_sym, 0, t_sym))

# Numerische Funktionen
f_x, f_U, f_Uz = [lambdify(t_sym, f, 'numpy') for f in [x_t, U_t, Uz_t]]

# Differentialgleichung für Ressourcenbestand
def dXdt(X, t):
    return g * X - f_x(t)  # Wachstum - Entnahme

# Lösen der ODE
X_values = odeint(dXdt, X_0, time).flatten()

# Separaten DataFrames für jeden Plot erstellen
df_entnahme = {
    'Zeit': np.concatenate([time, time]),
    'Wert': np.concatenate([f_x(time), np.full_like(time, X_0 * g)]),
    'Kurve': ['x(t)'] * len(time) + ['z(t)'] * len(time)
}

df_nutzen = {
    'Zeit': np.concatenate([time, time]),
    'Nutzen': np.concatenate([f_U(time), f_Uz(time)]),
    'Art': ['U(t)'] * len(time) + ['Uz(t)'] * len(time)
}

df_ressource = {
    'Zeit': time,
    'Bestand': X_values
}

# Plot Entnahmepfade
plot_entnahme = (ggplot(df_entnahme)
                + geom_line(aes('Zeit', 'Wert', color='Kurve'), size=1)
                + scale_color_manual(values=['blue', 'red'])
                + labs(title='Entnahmepfade',
                      x='Zeit t',
                      y='Entnahmerate',
                      color='Legende:')
                + theme(legend_position='right'))

# Plot Nutzenfunktionen
plot_nutzen = (ggplot(df_nutzen)
              + geom_line(aes('Zeit', 'Nutzen', color='Art'), size=1)
              + scale_color_manual(values=['blue', 'red'])
              + labs(title='Abgezinster Gesamtnutzen',
                    x='Zeit t',
                    y='Gesamtnutzen',
                    color='Legende:')
              + theme(legend_position='right'))

# Plot Ressourcenentwicklung
plot_ressource = (ggplot(df_ressource)
                 + geom_line(aes('Zeit', 'Bestand'), color='darkgreen', size=1)
                 + labs(title='Entwicklung des Ressourcenbestands',
                       x='Zeit t',
                       y='Ressourcenbestand X(t)')
                 + ylim(0, None))

plot_entnahme.show()
plot_nutzen.show()
plot_ressource.show()

# Nullstellensuche
try:
    t_root = brentq(lambda t: f_U(t) - f_Uz(t), 0.01, 200)
    print(f"Schnittpunkt bei t = {t_root:.2f}")
except ValueError:
    print("Kein Schnittpunkt im Intervall gefunden")

```